#!/bin/bash

# Get the current branch name
current_branch=$(git symbolic-ref --short HEAD)

# Get the default branch (checking common names)
default_branch=""
for branch in "development" "master" "main"; do
    if git show-ref --verify --quiet "refs/heads/$branch"; then
        default_branch="$branch"
        break
    fi
done

if [ -z "$default_branch" ]; then
    echo "Could not determine default branch. Skipping squash."
    exit 0
fi

# Function to check if squash is requested
# Returns "manual" if message exists before [squash]
# Returns "ai" if only [squash] exists
should_squash() {
    commit_messages=$(git log $default_branch.."$current_branch" --pretty=%B)
    for msg in $commit_messages; do
        if [[ $msg =~ \[squash\] ]]; then
            # Check if there's any text before [squash]
            message_before=$(echo "$msg" | sed 's/\[squash\].*//' | tr -d '[:space:]')
            if [ -n "$message_before" ]; then
                # There's a message before [squash]
                echo "manual:${msg//\[squash\].*/}"
                return 0
            else
                # Only [squash] found
                echo "ai"
                return 0
            fi
        fi
    done
    return 1
}

# Check if we're on a feature branch
if [[ $current_branch != master && $current_branch != development ]]; then
    echo "On feature branch: $current_branch"

    # Check if there are any commits to potentially squash
    commit_count=$(git rev-list --count $default_branch.."$current_branch")

    # Get squash type and potential message
    squash_result=$(should_squash)
    squash_status=$?

    if [ "$commit_count" -gt 1 ] && [ $squash_status -eq 0 ]; then
        echo "Multiple commits detected ($commit_count commits) and squash tag found. Preparing to squash..."

        # Get the merge base
        merge_base=$(git merge-base $default_branch HEAD)

        # Perform the squash
        git reset --soft "$merge_base"

        # Handle manual vs AI message
        if [[ $squash_result == manual:* ]]; then
            # Use the message that was before [squash]
            manual_msg="${squash_result#manual:}"
            echo "Using provided commit message"
            git commit -m "$manual_msg"
        else
            # Use AI to generate message
            echo "Generating AI commit message..."
            temp_msg_file=$(mktemp)
            PYTHON_PATH="/workspaces/repos/.venv/bin/python3"

            if ! $PYTHON_PATH /workspaces/repos/.devcontainer/prepare-commit-msg.py "$temp_msg_file" && [ -s "$temp_msg_file" ]; then
                echo "Using AI-generated commit message"
                git commit -F - < "$temp_msg_file"
                rm "$temp_msg_file"
            else
                echo "AI message generation failed, falling back to default construction"
                rm "$temp_msg_file"

                # Fallback to combining commit messages
                commit_messages=$(git log $default_branch.."$current_branch" --pretty=format:"%s" | sort -r)
                commit_type=$(echo "$commit_messages" | head -n1 | grep -o '^[a-z]\+:' || echo "feat:")
                consolidated_msg=$(echo "$commit_messages" | sed -e 's/^[a-z]\+: //' -e 's/\[squash\]//g' | tr '\n' ';' | sed 's/;/, /g' | sed 's/, $//')
                echo -e "${commit_type} ${consolidated_msg}\n\nSquashed ${commit_count} commits from '${current_branch}'" | git commit -F -
            fi
        fi

        # Force push the squashed commit
        echo "Force pushing squashed commit..."
        git push origin "$current_branch" --force-with-lease

        echo "Successfully squashed and pushed commits!"
        exit 0
    else
        echo "No squash requested or only one commit found. Proceeding with normal push..."
        exit 0
    fi
fi

# If we're not on a feature branch, continue with push
exit 0
